package ee.ut.server;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import org.hsqldb.jdbc.JDBCDriver;

public class Database {
	
	public static final String DRIVER = "org.hsqldb.jdbc.JDBCDriver";
	public static JDBCDriver instance = null;
	public static final String PROTOCOL = "jdbc:hsqldb:mem:myDb";
	
	public static void storeTestData(Connection conn) throws SQLException {
		Statement sta = conn.createStatement();
		sta.executeUpdate("INSERT INTO Players (name) VALUES ('P&auml;tris')");
		sta.executeUpdate("INSERT INTO Players (name) VALUES ('Silver')");
		sta.executeUpdate("INSERT INTO Players (name) VALUES ('Andres')");
		ResultSet rs = sta.executeQuery("SELECT id FROM Players WHERE name='Andres'");
		rs.next();
		Integer playerId = rs.getInt(1);
		sta.executeUpdate("INSERT INTO Games (name, player, opponent, finished, " +
			"playerField, opponentField, moveHistory, playerStarts, winner) " +
			"VALUES ('Andres vs. AI', " + playerId + ", -1, true, " +
			"'aa0b0600b00aaaai000aa0a0aia00a0aaaa0aa0020a5a0000700ai030iaiaaaa00aaai00aa05aaai1aa0a0aa000a0100aa0a', " +
			"'0b0a0aaa0a000haaba0aciaiaaa0af00aiaaaa0iaa0iaa00000a00aa0f0a00b0a0aiaga000aa000iaabaa00a0iaaa0adii0a', " +
			"'30925133122297310223191410043028159926488509261896627813766666868048757352417186820253226276422544874677556845235443502110709544906792912493950698999197695949517379296919110737082747165778384228436363357952750041363231333460186196', " +
			"true, 1)");
		sta.close();
	}

	public synchronized static void ensure() {
		if (instance == null) {
			try {
				instance = (JDBCDriver) Class.forName(DRIVER).newInstance();

				Connection conn = getConnection();
				if (!tableExists(conn, "Global")) {
					Statement sta = conn.createStatement();
					sta.executeUpdate("CREATE TABLE Global ("
							+ "PlayersListVersion INTEGER,"
							+ "GamesListVersion INTEGER)");
					sta.executeUpdate("INSERT INTO Global (PlayersListVersion, GamesListVersion) VALUES(1,1)");
					sta.executeUpdate("CREATE TABLE Players ("
							+ "ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
							+ "Victories INTEGER DEFAULT 0,"
							+ "Defeats INTEGER DEFAULT 0,"
							+ "Name varchar(50))");
					sta.executeUpdate("CREATE TABLE Games ("
							+ "ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
							+ "Player INTEGER,"
							+ "Opponent INTEGER DEFAULT -2," // -1 means AI
							+ "PlayerField CHAR(100),"
							+ "OpponentField CHAR(100),"
							+ "Name VARCHAR(50),"
							+ "PlayerStarts BOOLEAN,"
							+ "Finished BOOLEAN DEFAULT false,"
							+ "Winner BOOLEAN DEFAULT 0," // 1 - player won, 2 - opponent won
							+ "MoveHistory VARCHAR(402),"
							+ "MoveHistoryVersion INTEGER DEFAULT -1,"
							+ "PlayerMoveHistoryVersion INTEGER DEFAULT -1,"
							+ "OpponentMoveHistoryVersion INTEGER DEFAULT -1,"
							+ "FOREIGN KEY (Player) REFERENCES Players(ID))");
					sta.close();
					storeTestData(conn);
				}
				conn.close();
			} catch (InstantiationException e) {
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				e.printStackTrace();
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}
	
	public static boolean tableExists(Connection conn, String name) {
		ResultSet tables;
		try {
			tables = conn.getMetaData().getTables(conn.getCatalog(), null, "%", null);
			while(tables.next()) {
				if (tables.getString(3).equalsIgnoreCase(name)) {
					return true;
				}
			}
		} catch (SQLException e) {
			return false;
		}
		
		return false;
	}
	
	public static Connection getConnection() throws SQLException {
		return instance.connect(PROTOCOL, null);
	}
}
